
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ColorSpace.ush"

#include "../../Shared/HVPTDefinitions.h"

#include "ReSTIRUtils.ush"

#ifndef THREADGROUP_SIZE_2D
#define THREADGROUP_SIZE_2D 1
#endif // THREADGROUP_SIZE_2D


StructuredBuffer<FHVPT_Reservoir> Reservoirs;
StructuredBuffer<FHVPT_Bounce> ExtraBounces;

uint DebugFlags;
RWTexture2D<float3> RWDebugTexture;

float3 NormalizedFloatAsHueToRGB(float H)
{
	return HSV_2_LinearRGB(float3(H, 1, 1));
}


[numthreads(THREADGROUP_SIZE_2D, THREADGROUP_SIZE_2D, 1)]
void ReSTIRDebugVisualizationCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	int2 PixelCoord = DispatchThreadId.xy;

	if (any(PixelCoord >= View.ViewSizeAndInvSize.xy))
	{
		return;
	}

	FHVPT_Reservoir Reservoir = Reservoirs[HVPT_GetReservoirIndex(PixelCoord)];

	float3 OutColor = 0.0f;
	uint DebugViewMode = DebugFlags & 0xFF;

	if (DebugViewMode == HVPT_DEBUG_VIEW_MODE_CUSTOM)
	{
		return;
	}

	if (Reservoir.RunningSum > 0.0f)
	{
		switch (DebugViewMode)
		{
		case HVPT_DEBUG_VIEW_MODE_NUM_BOUNCES:
			OutColor = NormalizedFloatAsHueToRGB(1.0f - (Reservoir.GetNumExtraBounces()) / (float)(NumBounces));
			break;
		case HVPT_DEBUG_VIEW_MODE_PATH_TYPE:
		{
			if (Reservoir.GetNumExtraBounces() > 0)
			{
				FHVPT_Bounce LastBounce = ExtraBounces[HVPT_GetExtraBounceIndex(PixelCoord, Reservoir.GetNumExtraBounces() - 1)];
				if (HVPT_DecodeBounce(LastBounce).w == POSITIVE_INFINITY)
				{
					// Surface path
					OutColor = float3(0, 0, 1);
					break;
				}
			}

			if (Reservoir.GetEmissionPath())
			{
				OutColor = float3(1, 0, 0);
				break;
			}

			// Scattering path
			OutColor = float3(0, 1, 0);
			break;
		}
		case HVPT_DEBUG_VIEW_MODE_LIGHT_ID:
			OutColor = Reservoir.GetEmissionPath() ? 0.2f : NormalizedFloatAsHueToRGB((Reservoir.GetLightId()) / (float)(SceneLightCount));
			break;
		case HVPT_DEBUG_VIEW_MODE_TEMPORAL_REUSE:
			// Written in TemporalReuse.usf
			return;
		case HVPT_DEBUG_VIEW_MODE_FIREFLY_DETECTION:
			OutColor = float3(Reservoir.RunningSum / 10.0f, Reservoir.RunningSum / 100.0f, Reservoir.RunningSum / 1000.0f);
			break;
		case HVPT_DEBUG_VIEW_MODE_REPROJECTION:
			// Written in TemporalReuse.usf
			return;
		default:
			break;
		}
	}

	RWDebugTexture[PixelCoord] = OutColor;
}
