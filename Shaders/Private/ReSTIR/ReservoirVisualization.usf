
#include "/Engine/Private/Common.ush"
#include "/Engine/Private/ColorSpace.ush"

#include "../../Shared/HVPTDefinitions.h"

#include "ReSTIRUtils.ush"

#ifndef THREADGROUP_SIZE_2D
#define THREADGROUP_SIZE_2D 1
#endif // THREADGROUP_SIZE_2D


StructuredBuffer<FHVPT_Reservoir> Reservoirs;

uint DebugFlags;
RWTexture2D<float3> RWDebugTexture;

float3 NormalizedFloatAsHueToRGB(float H)
{
	return HSV_2_LinearRGB(float3(H, 1, 1));
}


[numthreads(THREADGROUP_SIZE_2D, THREADGROUP_SIZE_2D, 1)]
void ReSTIRDebugVisualizationCS(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	int2 PixelCoord = DispatchThreadId.xy;

	if (any(PixelCoord >= View.ViewSizeAndInvSize.xy))
	{
		return;
	}

	FHVPT_Reservoir Reservoir = Reservoirs[HVPT_GetReservoirIndex(PixelCoord)];

	float3 OutColor = 0.0f;
	uint DebugViewMode = DebugFlags & 0xFF;

	if (DebugViewMode == HVPT_DEBUG_VIEW_MODE_CUSTOM)
	{
		return;
	}

	if (Reservoir.RunningSum > 0.0f)
	{
		switch (DebugViewMode)
		{
		case HVPT_DEBUG_VIEW_MODE_NUM_BOUNCES:
			OutColor = NormalizedFloatAsHueToRGB(1.0f - (Reservoir.NumExtraBounces) / (float)(NumBounces));
			break;
		case HVPT_DEBUG_VIEW_MODE_PATH_TYPE:
			OutColor = (Reservoir.bEmissionPath) ? float3(1, 1, 0) : float3(0, 1, 1);
			break;
		case HVPT_DEBUG_VIEW_MODE_LIGHT_ID:
			OutColor = NormalizedFloatAsHueToRGB((Reservoir.LightId) / (float)(SceneLightCount));
			break;
		case HVPT_DEBUG_VIEW_MODE_TEMPORAL_REUSE:
			// Written in TemporalReuse.usf
			return;
		default:
			break;
		}
	}

	RWDebugTexture[PixelCoord] = OutColor;
}
